'last_Housing', 'Mdn_Housing',
'last_Leisure', 'Avg_Leisure', 'Mdn_Leisure',
'last_Living', 'Avg_Living', 'Avg_Freq_Living','X1st_Bad_Habits', 'last_Bad_Habits',
'X1st_Housing', 'last_Housing',
'X1st_Income', 'last_Income',
'X1st_Leisure', 'last_Leisure',
'X1st_Living', 'last_Living',
'X1st_Loans', 'last_Loans',
'X1st_Medical', 'last_Medical',))]
# Remove High Correlated banking variables:
MyMarble_df <- MyMarble_df[, -which(names(MyMarble_df) %in%
c('Mdn_Bad_Habits', 'Avg_Freq_Bad_Habits',
'last_Housing', 'Mdn_Housing',
'last_Leisure', 'Avg_Leisure', 'Mdn_Leisure',
'last_Living', 'Avg_Living', 'Avg_Freq_Living','X1st_Bad_Habits', 'last_Bad_Habits',
'X1st_Housing', 'last_Housing',
'X1st_Income', 'last_Income',
'X1st_Leisure', 'last_Leisure',
'X1st_Living', 'last_Living',
'X1st_Loans', 'last_Loans',
'X1st_Medical', 'last_Medical'))]
str(MyMarble_df)
### Forward Selection
names(MyMarble_df)[names(MyMarble_df) == "Life_Duration"] <- "Duration"
Marble_lm <- lm(Duration ~ ., MyMarble_df)
Marble_lm_null <- lm(Duration ~ 1, MyMarble_df)
Marble_FS <- step(Marble_lm_null, scope=list(lower=Marble_lm_null, upper=Marble_lm), direction = "forward")
summary(Marble_FS)
### Backward Selection
Marble_BS <- step(Marble_lm, direction = "backward")
summary(Marble_BS)
### Stepwise Selection
Marble_Both <- step(Marble_lm, direction = "both")
summary(Marble_Both)
# Comparison
## Forward
Duration ~ Subscription + Payment_Frequency + Avg_Income +
Credit_Score_Improvement + Mdn_R_Balance + Is_BankData
## Backward
Duration ~ Subscription + Payment_Frequency + Credit_Score_Improvement +
Is_BankData + Mdn_R_Balance + Avg_Income
## Stepwise
Duration ~ Subscription + Payment_Frequency + Credit_Score_Improvement +
Is_BankData + Mdn_R_Balance + Avg_Income
# Regression with all variables
full_reg_lm <- lm(Duration ~ ., data = MyMarble_df)
summary(full_reg_lm)
# Regression with FS variables
selected_reg_lm <- lm(Duration ~ Subscription + Payment_Frequency + Avg_Income +
Credit_Score_Improvement + Mdn_R_Balance + Is_BankData, data = MyMarble_df)
summary(selected_reg_lm)
# Regression with FS variables
selected_reg_lm <- lm(Duration ~ Subscription + Payment_Frequency + Credit_Score_Improvement +
Is_BankData + Mdn_R_Balance + Avg_Income, data = MyMarble_df)
summary(selected_reg_lm)
#Standardarized Coefficients
library(lm.beta)
lm.beta(selected_reg_lm)
# Training Regression with FS variables
MyMarble_lm <- lm(Duration ~ Subscription + Payment_Frequency + Credit_Score_Improvement +
Is_BankData + Mdn_R_Balance + Avg_Income, data = train.df)
# Create Training/Testing sets
set.seed(1)
train.index <- sample(c(1:dim(MyMarble_df)[1]), dim(MyMarble_df)[1]*0.8)
train.df <- MyMarble_df[train.index, ]
test.df <- MyMarble_df[-train.index, ]
# Training Regression with FS variables
MyMarble_lm <- lm(Duration ~ Subscription + Payment_Frequency + Credit_Score_Improvement +
Is_BankData + Mdn_R_Balance + Avg_Income, data = train.df)
summary(MyMarble_lm)
#Standardarized Coefficients
library(lm.beta)
lm.beta(MyMarble_lm)
library(forecast)
# Training Prediction
MyMarble_lm.pred.train <- predict(MyMarble_lm, train.df)
# Test Residuals
all.residuals.train <- train.df$Duration - MyMarble_lm.pred.train
My_residuals.train <- data.frame("Predicted" = MyMarble_lm.pred.train, "Actual" = train.df$Duration,
"Residual" = all.residuals.train)
accuracy(MyMarble_lm.pred.train, train.df$Duration)
hist(all.residuals.train, breaks = 25, xlab = "Residuals", main = "")
# Test Prediction
MyMarble_lm.pred.test <- predict(MyMarble_lm, test.df)
# Test Residuals
all.residuals.test <- test.df$Duration - MyMarble_lm.pred.test
My_residuals.test <- data.frame("Predicted" = MyMarble_lm.pred.test, "Actual" = test.df$Duration,
"Residual" = all.residuals.test)
accuracy(MyMarble_lm.pred.test, test.df$Duration)
hist(all.residuals.test, breaks = 25, xlab = "Residuals", main = "")
library(caret)
library(pROC)
library(tidyverse)
library(fastDummies)
library(dplyr)
library(tidyr)
library(datasets)
library(class)
library(mice)
Boost_df <- read_csv("Boost_NoNA.csv")
head(Boost_df)
str(Boost_df)
# Filter by customer that churned
Boost_df <- Boost_df[!(Boost_df$Is_Churn == 'Non_Churn'), ]
# Delete Cancellation_Reason, Cancellation_Reason_Details (missing information)
Boost_df <- Boost_df[, -which(names(Boost_df) %in%
c('Account_ID', 'Payment_Details_ID',
'Application_ID_short', 'Application_ID_long','Loan_Number',
'Payment_Status', 'Churn_Loyalty', 'Churn_Status', 'Is_Churn'))]
names(Boost_df)
# Factor categorical variables
factor_cols <- c("Subscription", "Payment_Frequency", "Province",
"Application_Status", "Application_Stage","Loan_Status",
"Loan_SubStatus")
Boost_df[factor_cols] <- lapply(Boost_df[factor_cols], as.factor)
str(Boost_df)
# Check for correlation for categorical variables
category_df <- Boost_df[, which(names(Boost_df) %in%
c("Subscription", "Payment_Frequency", "Loan_Status", "Active", "Province",
"Application_Stage", "Application_Status", "Credit_Score_Improvement",
"Is_BankData", "Loan_SubStatus"))]
category_df[] <- lapply(category_df,as.integer)
library(sjPlot)
sjp.corr(category_df)
tab_corr(category_df)
# Remove High Correlated categorical variables:
Boost_df <- Boost_df[, -which(names(Boost_df) %in%
c('Application_Status'))]
# Remove total revenue due to reverse causality
Boost_df <- Boost_df[, -which(names(Boost_df) %in%
c('Total_Revenue'))]
# Remove unattainable variables
Boost_df <- Boost_df[, -which(names(Boost_df) %in%
c("Loan_Status", "Loan_SubStatus", "Term", "Active", "Payment_Amount"))]
credir_df <- Boost_df[, which(names(Boost_df) %in%
c("Max_Bankruptcies",
"Max_Collections", "Avg_R_Limit", "Mdn_R_Limit", "Avg_R_Balance",
"Mdn_R_Balance", "Avg_R_Payment", "Mdn_R_Payment", "Avg_R_Past_Due",
"Mdn_R_Past_Due", "Avg_I_Balance", "Mdn_I_Balance", "Avg_I_Payment",
"Mdn_I_Payment","Avg_I_Past_Due","Mdn_I_Past_Due", "Avg_O_Balance",
"Mdn_O_Balance","Avg_O_Past_Due", "Mean_Credit_Score",
"Median_Credit_Score", "Min_Credit_Score", "Max_Credit_Score",
"Total_Periodic_Payment", "Total_Loan_Amount"))]
res <- cor(credir_df)
round(res, 2)
# Visualization
library(corrplot)
corrplot(res, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
res[abs(res) > 0.9] <- NA
res
# Remove High Correlated variables:
Boost_df <- Boost_df[, -which(names(Boost_df) %in%
c('Avg_R_Limit', 'Avg_R_Balance', 'Avg_R_Payment','Avg_R_Past_Due',
'Avg_I_Balance', 'Avg_I_Payment', 'Avg_I_Past_Due',
'Avg_O_Balance', 'Avg_O_Past_Due',
'Median_Credit_Score', 'Min_Credit_Score', 'Max_Credit_Score'))]
str(Boost_df)
# Correlation Matrix for Banking Data
bankir_df <- Boost_df[, which(names(Boost_df) %in%
c('X1st_Bad_Habits', 'last_Bad_Habits', 'Avg_Bad_Habits', 'Mdn_Bad_Habits',
'X1st_Housing', 'last_Housing', 'Avg_Housing', 'Mdn_Housing',
'X1st_Income', 'last_Income', 'Avg_Income', 'Mdn_Income',
'X1st_Leisure', 'last_Leisure', 'Avg_Leisure', 'Mdn_Leisure',
'X1st_Living', 'last_Living', 'Avg_Living', 'Mdn_Living',
'X1st_Loans', 'last_Loans', 'Avg_Loans', 'Mdn_Loans',
'X1st_Medical', 'last_Medical', 'Avg_Medical', 'Mdn_Medical',
'Avg_Freq_Bad_Habits', 'Avg_Freq_Charity', 'Avg_Freq_Housing',
'Avg_Freq_Income', 'Avg_Freq_Leisure', 'Avg_Freq_Living',
'Avg_Freq_Loans', 'Avg_Freq_Medical'))]
res_bank <- cor(bankir_df)
round(res_bank, 2)
# Visualization
corrplot(res_bank, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
res_bank[abs(res_bank) > 0.75] <- NA
res_bank
# write.csv(res_bank,"res_bank.csv", row.names = TRUE)
# Remove High Correlated banking variables:
Boost_df <- Boost_df[, -which(names(Boost_df) %in%
c('Mdn_Bad_Habits', 'Avg_Freq_Bad_Habits',
'Mdn_Housing', 'Mdn_Income',
'Mdn_Leisure', 'Avg_Freq_Leisure',
'Mdn_Living', 'Avg_Freq_Living',
'X1st_Loans', 'Avg_Loans',
'X1st_Bad_Habits', 'last_Bad_Habits',
'X1st_Housing', 'last_Housing',
'X1st_Income', 'last_Income',
'X1st_Leisure', 'last_Leisure',
'X1st_Living', 'last_Living',
'X1st_Loans', 'last_Loans',
'X1st_Medical', 'last_Medical'))]
str(Boost_df)
#Boost_df <- Boost_df[, -which(names(Boost_df) %in%
#              c('Days_Past_Due'))]
### Forward Selection
names(Boost_df)[names(Boost_df) == "Life_Duration"] <- "Duration"
Boost_lm <- lm(Duration ~ ., Boost_df)
Boost_lm_null <- lm(Duration ~ 1, Boost_df)
Boost_FS <- step(Boost_lm_null, scope=list(lower=Boost_lm_null, upper=Boost_lm), direction = "forward")
summary(Boost_FS)
### Backward Selection
Boost_BS <- step(Boost_lm, direction = "backward")
summary(Boost_BS)
### Stepwise Selection
Boost_Both <- step(Boost_lm, direction = "both")
summary(Boost_Both)
# Regression with all variables
full_reg_lm <- lm(Duration ~ ., data = Boost_df)
summary(full_reg_lm)
# Regression with FS variables
full_reg_lm <- lm(Duration ~ Days_Past_Due + Mdn_I_Past_Due + Avg_Freq_Income +
Mdn_Loans, data = Boost_df)
summary(full_reg_lm)
# Regression with FS variables
full_reg_lm <- lm(Duration ~ Days_Past_Due + Mdn_I_Past_Due + Avg_Freq_Income +
Mdn_Loans, data = Boost_df)
summary(full_reg_lm)
# Regression with FS variables
full_reg_lm <- lm(Duration ~ Days_Past_Due + Time_to_Fund + Mdn_I_Past_Due +
Mdn_Medical + Avg_Freq_Income, data = Boost_df)
summary(full_reg_lm)
lm.beta(full_reg_lm)
# Create Training/Testing sets
set.seed(1)
train.index <- sample(c(1:dim(Boost_df)[1]), dim(Boost_df)[1]*0.8)
train.df <- Boost_df[train.index, ]
test.df <- Boost_df[-train.index, ]
# Training Regression with FS variables
Boost_lm <- lm(Duration ~ Days_Past_Due + Time_to_Fund + Mdn_I_Past_Due +
Mdn_Medical + Avg_Freq_Income, data = train.df)
summary(Boost_lm)
library(forecast)
# Training Prediction
Boost_lm.pred.train <- predict(Boost_lm, train.df)
# Test Residuals
all.residuals.train <- train.df$Duration - Boost_lm.pred.train
My_residuals.train <- data.frame("Predicted" = Boost_lm.pred.train, "Actual" = train.df$Duration,
"Residual" = all.residuals.train)
accuracy(Boost_lm.pred.train, train.df$Duration)
hist(all.residuals.train, breaks = 25, xlab = "Residuals", main = "")
# Test Prediction
Boost_lm.pred.test <- predict(Boost_lm, test.df)
# Test Residuals
all.residuals.test <- test.df$Duration - Boost_lm.pred.test
My_residuals.test <- data.frame("Predicted" = Boost_lm.pred.test, "Actual" = test.df$Duration,
"Residual" = all.residuals.test)
accuracy(Boost_lm.pred.test, test.df$Duration)
hist(all.residuals.test, breaks = 25, xlab = "Residuals", main = "")
library(corrplot)
library(tidyverse)
library(cluster)
library(factoextra)
library(dendextend)
library(dplyr)
library(Rtsne)
Boost_df <- read_csv("Boost_NoNA.csv")
head(Boost_df)
#str(Boost_df)
# Delete Variables with multiple levels
# Delete Cancellation_Reason, Cancellation_Reason_Details (missing information)
Boost_df <- Boost_df[, -which(names(Boost_df) %in%
c('Account_ID', 'Payment_Details_ID',
'Application_ID_short', 'Application_ID_long','Loan_Number',
'Payment_Status', 'Churn_Loyalty', 'Churn_Status'))]
# Factor categorical variables
factor_cols <- c("Subscription", "Payment_Frequency", "Province",
"Application_Status", "Application_Stage","Loan_Status",
"Loan_SubStatus", "Is_Churn")
Boost_df[factor_cols] <- lapply(Boost_df[factor_cols], as.factor)
#str(Boost_df)
# Check for correlation for categorical variables
category_df <- Boost_df[, which(names(Boost_df) %in%
c("Subscription", "Payment_Frequency", "Loan_Status", "Active", "Province",
"Application_Stage", "Application_Status", "Credit_Score_Improvement",
"Is_BankData", "Loan_SubStatus"))]
category_df[] <- lapply(category_df,as.integer)
library(sjPlot)
sjp.corr(category_df)
tab_corr(category_df)
# Remove High Correlated categorical variables:
Boost_df <- Boost_df[, -which(names(Boost_df) %in%
c('Application_Status'))]
# Remove unnecessary variables
Boost_df <- Boost_df[, -which(names(Boost_df) %in%
c("Loan_Status", "Loan_SubStatus", "Term", "Active", "Payment_Amount"))]
# Correlation Matrix for Credit Data
credir_df <- Boost_df[, which(names(Boost_df) %in%
c("Max_Bankruptcies",
"Max_Collections", "Avg_R_Limit", "Mdn_R_Limit", "Avg_R_Balance",
"Mdn_R_Balance", "Avg_R_Payment", "Mdn_R_Payment", "Avg_R_Past_Due",
"Mdn_R_Past_Due", "Avg_I_Balance", "Mdn_I_Balance", "Avg_I_Payment",
"Mdn_I_Payment","Avg_I_Past_Due","Mdn_I_Past_Due", "Avg_O_Balance",
"Mdn_O_Balance","Avg_O_Past_Due", "Mean_Credit_Score",
"Median_Credit_Score", "Min_Credit_Score", "Max_Credit_Score",
"Total_Periodic_Payment", "Total_Loan_Amount"))]
res <- cor(credir_df)
round(res, 2)
# Visualization
library(corrplot)
corrplot(res, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
res[abs(res) > 0.75] <- NA
res
# Remove High Correlated variables:
Boost_df <- Boost_df[, -which(names(Boost_df) %in%
c('Avg_R_Limit', 'Avg_R_Balance', 'Avg_R_Payment','Avg_R_Past_Due',
'Avg_I_Balance', 'Avg_I_Payment', 'Avg_I_Past_Due',
'Avg_O_Balance', 'Avg_O_Past_Due',
'Median_Credit_Score', 'Min_Credit_Score', 'Max_Credit_Score'))]
#str(Boost_df)
# Correlation Matrix for Banking Data
bankir_df <- Boost_df[, which(names(Boost_df) %in%
c('X1st_Bad_Habits', 'last_Bad_Habits', 'Avg_Bad_Habits', 'Mdn_Bad_Habits',
'X1st_Housing', 'last_Housing', 'Avg_Housing', 'Mdn_Housing',
'X1st_Income', 'last_Income', 'Avg_Income', 'Mdn_Income',
'X1st_Leisure', 'last_Leisure', 'Avg_Leisure', 'Mdn_Leisure',
'X1st_Living', 'last_Living', 'Avg_Living', 'Mdn_Living',
'X1st_Loans', 'last_Loans', 'Avg_Loans', 'Mdn_Loans',
'X1st_Medical', 'last_Medical', 'Avg_Medical', 'Mdn_Medical',
'Avg_Freq_Bad_Habits', 'Avg_Freq_Charity', 'Avg_Freq_Housing',
'Avg_Freq_Income', 'Avg_Freq_Leisure', 'Avg_Freq_Living',
'Avg_Freq_Loans', 'Avg_Freq_Medical'))]
# No 'Avg_Freq_Bad_Habits' in the dataset
res_bank <- cor(bankir_df)
round(res_bank, 2)
# Visualization
corrplot(res_bank, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
res_bank[abs(res_bank) > 0.75] <- NA
res_bank
# write.csv(res_bank,"res_bank.csv", row.names = TRUE)
# Remove High Correlated banking variables:
Boost_df <- Boost_df[, -which(names(Boost_df) %in%
c('Mdn_Bad_Habits', 'Avg_Freq_Bad_Habits',
'Mdn_Housing', 'Mdn_Income',
'Mdn_Leisure', 'Avg_Freq_Leisure',
'Mdn_Living', 'Avg_Freq_Living',
'Avg_Loans',
'X1st_Bad_Habits', 'last_Bad_Habits',
'X1st_Housing', 'last_Housing',
'X1st_Income', 'last_Income',
'X1st_Leisure', 'last_Leisure',
'X1st_Living', 'last_Living',
'X1st_Loans', 'last_Loans',
'X1st_Medical', 'last_Medical'))]
#str(Boost_df)
normalize <- function(x) {
num <- x - min(x)
denom <- max(x) - min(x)
return (num/denom)
}
scale_col <- c("Total_Revenue", "Days_Past_Due", "Life_Duration", "Time_to_Fund",
"Mdn_R_Limit", "Mdn_R_Balance", "Mdn_R_Payment", "Mdn_R_Past_Due" ,
"Mdn_I_Balance", "Mdn_I_Payment", "Mdn_I_Past_Due", "Mdn_O_Balance",
"Total_Loan_Amount", "Total_Periodic_Payment", "Mean_Credit_Score",
"Avg_Bad_Habits", "Avg_Housing", "Avg_Income", "Avg_Leisure",
"Avg_Living", "Mdn_Loans", "Avg_Medical", "Mdn_Medical")
Boost_df[scale_col] <- lapply(Boost_df[scale_col], normalize)
gower_dist <- daisy(Boost_df,metric="gower")
fviz_dist(gower_dist, gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))
set.seed(2)
k<-2
pam_fit <- pam(gower_dist, diss = TRUE, k)
Boost_df$Cluster<-as.factor(pam_fit$cluster)
pam_results <- Boost_df %>%
mutate(cluster = pam_fit$clustering) %>%
group_by(cluster) %>%
do(the_summary = summary(.))
pam_results$the_summary
library(readr)
library(readr)
urlfile="https://github.com/trustinyoon/2020-NBA-Chip-Predictor/blob/ef254c8630525d2afc6bf408fcb8c173f3fcf227/past_league_rankings.csv"
NBA <- read_csv(url(urlfile))
library(readr)
urlfile="https://github.com/trustinyoon/2020-NBA-Chip-Predictor/blob/ef254c8630525d2afc6bf408fcb8c173f3fcf227/past_league_rankings.csv"
NBA <- read_csv(url(urlfile))
View(NBA)
setwd("C:/Users/Karen/Desktop/Finance/Project")
tab <- read.table("NBA.txt", comment="", header=TRUE)
library(caret)
library(pROC)
library(tidyverse)
library(fastDummies)
library(dplyr)
library(tidyr)
library(datasets)
library(class)
library(mice)
library(readxl)
library(forecast)
NBA_df <- read.csv("NBA.csv")
#head(NBA_df)
#names(NBA_df)
# Delete Rank, Team name, year and minutes played
NBA_df <- NBA_df[, -which(names(NBA_df) %in%
c('ï..Rank', 'Team', 'Year', 'MP', 'O_MP'))]
# Delete one of the dependent variables
NBA_df <- NBA_df[, -which(names(NBA_df) %in%
c('Champion'))]
# Correlation Matrix for Team Stats
team_df <- NBA_df[, which(names(NBA_df) %in%
c("FG", "FGA", "FG_perc", "X3P", "X3PA", "X3P_perc", "X2P", "X2PA",
"X2P_perc", "FT", "FTA", "FT_perc", "ORB", "DRB", "TRB", "AST",
"STL", "BLK", "TOV", "PF", "PTS"))]
team_cor <- cor(team_df)
round(team_cor, 2)
# Visualization
library(corrplot)
corrplot(team_cor, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
team_cor[abs(team_cor) > 0.75] <- NA
team_cor
# Remove High Correlated Team Stats:
NBA_df <- NBA_df[, -which(names(NBA_df) %in%
c("FG", "X3P", "X2P", "X2PA", "X2P_perc", "FT"))]
# Correlation Matrix for Opposing Team Stats
opp_df <- NBA_df[, which(names(NBA_df) %in%
c("O_FG", "O_FGA", "O_FG_perc", "O_3P", "O_3PA", "O_3P_perc", "O_2P", "O_2PA",
"O_2P_perc", "O_FT", "O_FTA", "O_FT_perc", "O_ORB", "O_DRB", "O_TRB", "O_AST",
"O_STL", "O_BLK", "O_TOV", "O_PF", "O_PTS"))]
opp_cor <- cor(opp_df)
round(opp_cor, 2)
# Visualization
library(corrplot)
corrplot(opp_cor, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
opp_cor[abs(opp_cor) > 0.75] <- NA
opp_cor
# Remove High Correlated Opposing Team Stats:
NBA_df <- NBA_df[, -which(names(NBA_df) %in%
c("O_FG", "O_3P", "O_2PA", "O_2P_perc", "O_FT", "O_TRB"))]
# Correlation Matrix for Advance Team Stats
adv_df <- NBA_df[, which(names(NBA_df) %in%
c( "W", "L" , "PW", "PL", "MOV", "SOS", "SRS", "ORtg", "DRtg",
"Pace", "FTr", "X3PAr", "eFG_perc", "TOV_perc", "ORB_perc",
"FT.FGA", "eFG_perc_1", "TOV_perc_2", "DRB_perc", "FT.FGA_3",
"Attendance"))]
adv_cor <- cor(adv_df)
round(adv_cor, 2)
# Visualization
library(corrplot)
corrplot(adv_cor, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
adv_cor[abs(adv_cor) > 0.9] <- NA
adv_cor
# Remove High Correlated Advanced Team Stats:
NBA_df <- NBA_df[, -which(names(NBA_df) %in%
c("L", "PW", "PL"))]
# Regression with all variables
NBA_reg <- lm(Playoff.Wins ~ ., NBA_df)
summary(NBA_reg)
# Forward Selection
NBA_lm_null <- lm(Playoff.Wins ~ 1, NBA_df)
NBA_FS <- step(NBA_lm_null, scope=list(lower=NBA_lm_null, upper=NBA_lm), direction = "forward")
# Forward Selection
NBA_lm_null <- lm(Playoff.Wins ~ 1, NBA_df)
NBA_FS <- step(NBA_lm_null, scope=list(lower=NBA_lm_null, upper=NBA_reg), direction = "forward")
# Stepwise Selection
NBA_Both <- step(NBA_reg, direction = "both")
# Results
## Forward
summary(NBA_FS)
## Backward
summary(NBA_BS)
# Backward Selection
NBA_BS <- step(NBA_reg, direction = "backward")
# Results
## Forward
summary(NBA_FS)
## Backward
summary(NBA_BS)
## Both
summary(NBA_Both)
# Training set
train.df <- NBA_df
# Testing Set
test.df <- read.csv("NBA2021-2022.csv")
row.names(test.df) <- test.df$Team
test.df <- test.df[, -which(names(test.df) %in%
c('ï..Rank', 'Year', 'MP', 'O_MP', 'Champion',
"FG", "X3P", "X2P", "X2PA", "X2P_perc", "FT",
"O_FG", "O_3P", "O_2PA", "O_2P_perc", "O_FT", "O_TRB",
"L", "PW", "PL"))]
## Train Model 1
NBA_lm_1 <- lm(formula = Playoff.Wins ~ W + SOS + TOV_perc + O_BLK + Attendance, data = train.df)
# Cross-Validation Model 1
# Define training control
train.control <- trainControl(method = "repeatedcv", number = 10, repeats = 5)
# Train the model
model_1 <- train(Playoff.Wins ~ W + SOS + TOV_perc + O_BLK + Attendance, data = train.df, method = "lm",
trControl = train.control)
# Summarize the results
print(model_1)
## Train Model 2
NBA_lm_2 <- lm(formula = Playoff.Wins ~ TOV + PTS + O_BLK + W + SOS + eFG_perc +
TOV_perc + FT.FGA + Attendance, data = train.df)
# Cross-Validation Model 2
# Train the model
model_2 <- train(Playoff.Wins ~ TOV + PTS + O_BLK + W + SOS + eFG_perc +
TOV_perc + FT.FGA + Attendance, data = train.df, method = "lm",
trControl = train.control)
# Summarize the results
print(model_2)
## Test model
NBA_lm.pred.test_1 <- predict(NBA_lm_1, test.df)
sort(NBA_lm.pred.test_1, decreasing = TRUE)
## Test model 2
NBA_lm.pred.test_2 <- predict(NBA_lm_2, test.df)
sort(NBA_lm.pred.test_2, decreasing = TRUE)
setwd("C:/Users/Karen/Desktop/Finance/Project")
write.csv(NBA_df,"Preprocessed_NBA.csv", row.names = FALSE)
